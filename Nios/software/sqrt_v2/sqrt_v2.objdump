
sqrt_v2.elf:     file format elf32-littlenios2
sqrt_v2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800020

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00001804 memsz 0x00001804 flags r-x
    LOAD off    0x00002824 vaddr 0x00801824 paddr 0x00801af8 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00002dcc vaddr 0x00801dcc paddr 0x00801dcc align 2**12
         filesz 0x00000000 memsz 0x000000a4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000017c0  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  008017e0  008017e0  000027e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  00801824  00801af8  00002824  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          000000a4  00801dcc  00801dcc  00002dcc  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00002af8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000448  00000000  00000000  00002b20  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000061c  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00007edf  00000000  00000000  00003584  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001cd1  00000000  00000000  0000b463  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000053f8  00000000  00000000  0000d134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000006f8  00000000  00000000  0001252c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a4b  00000000  00000000  00012c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000c67  00000000  00000000  0001366f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000030  00000000  00000000  000142d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00014308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00015a55  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  00015a58  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00015a5c  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00015a5d  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00015a5e  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00015a62  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00015a66  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00015a6a  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00015a73  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00015a7c  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00015a85  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000022  00000000  00000000  00015a90  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0004c4bd  00000000  00000000  00015ab2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .text	00000000 .text
008017e0 l    d  .rodata	00000000 .rodata
00801824 l    d  .rwdata	00000000 .rwdata
00801dcc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00801824 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00800318 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00800510 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00801904 l     O .rwdata	0000002c JTAG_UART
008005fc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_close.c
00800988 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00800a2c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00800b0c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00800c64 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00800da0 l     F .text	000000dc alt_file_locked
00801004 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008015bc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0080177c l     F .text	00000040 alt_sim_halt
00800384 g     F .text	0000006c alt_main
008000a0 g     F .text	00000090 _puts_r
00801af8 g       *ABS*	00000000 __flash_rwdata_start
00801de0 g     O .bss	00000004 altera_avalon_timer_ts_freq
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
01104000 g       *ABS*	00000000 __alt_mem_ONCHIP
00800020 g       *ABS*	00000000 __flash_exceptions_start
00801dcc g     O .bss	00000004 errno
00801dd4 g     O .bss	00000004 alt_argv
00809ad8 g       *ABS*	00000000 _gp
00801958 g     O .rwdata	00000180 alt_fd_list
008010e4 g     F .text	00000094 alt_find_dev
00800d28 g     F .text	00000078 alt_io_redirect
008017e0 g       *ABS*	00000000 __DTOR_END__
00800130 g     F .text	00000014 puts
008006e4 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00801350 g     F .text	00000090 alt_icache_flush
00801af0 g     O .rwdata	00000004 alt_max_fd
00801adc g     O .rwdata	00000004 _global_impure_ptr
00801e70 g       *ABS*	00000000 __bss_end
00801930 g     O .rwdata	00000028 alt_dev_null
008009e8 g     F .text	00000044 alt_dcache_flush_all
00801af8 g       *ABS*	00000000 __ram_rwdata_end
00801ae8 g     O .rwdata	00000008 alt_dev_list
008003f0 g     F .text	00000120 write
00801824 g       *ABS*	00000000 __ram_rodata_end
00800000 g       *ABS*	00000000 __alt_mem_SDRAM
00801e70 g       *ABS*	00000000 end
008017dc g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008007e8 g     F .text	000000a4 altera_avalon_jtag_uart_write
008015c0 g     F .text	000001bc __call_exitprocs
00800020 g     F .text	0000004c _start
008005a4 g     F .text	00000058 alt_sys_init
00801450 g     F .text	0000016c __register_exitproc
00801824 g       *ABS*	00000000 __ram_rwdata_start
008017e0 g       *ABS*	00000000 __ram_rodata_start
00800634 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00801298 g     F .text	000000b8 alt_get_fd
00801414 g     F .text	0000003c memcmp
00801e70 g       *ABS*	00000000 __alt_stack_base
00801178 g     F .text	00000120 alt_find_file
00800a58 g     F .text	000000b4 alt_dev_llist_insert
00800164 g     F .text	000000bc __sfvwrite_small_dev
00801dcc g       *ABS*	00000000 __bss_start
0080006c g     F .text	00000034 main
00801dd8 g     O .bss	00000004 alt_envp
0080068c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00801de4 g     O .bss	0000008c _atexit0
00801af4 g     O .rwdata	00000004 alt_errno
008017e0 g       *ABS*	00000000 __CTOR_END__
008017e0 g       *ABS*	00000000 __flash_rodata_start
008017e0 g       *ABS*	00000000 __DTOR_LIST__
00800570 g     F .text	00000034 alt_irq_init
00801064 g     F .text	00000060 alt_release_fd
008013e0 g     F .text	00000014 atexit
00800220 g     F .text	00000078 _write_r
00801ad8 g     O .rwdata	00000004 _impure_ptr
00801dd0 g     O .bss	00000004 alt_argc
00801ddc g     O .bss	00000004 altera_avalon_timer_ts_base
00800bd0 g     F .text	00000064 _do_dtors
00801ae0 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00801af8 g       *ABS*	00000000 _edata
00801e70 g       *ABS*	00000000 _end
00800020 g       *ABS*	00000000 __ram_exceptions_end
008010c4 g     F .text	00000020 altera_nios2_qsys_irq_init
008013f4 g     F .text	00000020 exit
01000000 g       *ABS*	00000000 __alt_data_end
008017bc g     F .text	00000020 _exit
00800144 g     F .text	00000020 strlen
00800e7c g     F .text	00000188 open
01080000 g       *ABS*	00000000 __alt_mem_SRAM
00800c34 g     F .text	00000030 alt_icache_flush_all
00800b6c g     F .text	00000064 _do_ctors
0080088c g     F .text	000000fc close
00800298 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08400814 	ori	at,at,32
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_SDRAM-0x800000>

Disassembly of section .text:

00800020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800024:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800028:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80002c:	00bffd16 	blt	zero,r2,800024 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800030:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800034:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  800038:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80003c:	d6a6b614 	ori	gp,gp,39640
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800040:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800044:	10877314 	ori	r2,r2,7628

    movhi r3, %hi(__bss_end)
  800048:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80004c:	18c79c14 	ori	r3,r3,7792

    beq r2, r3, 1f
  800050:	10c00326 	beq	r2,r3,800060 <_start+0x40>

0:
    stw zero, (r2)
  800054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80005c:	10fffd36 	bltu	r2,r3,800054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800060:	08002980 	call	800298 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800064:	08003840 	call	800384 <alt_main>

00800068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800068:	003fff06 	br	800068 <alt_after_alt_main>

0080006c <main>:
#define sw *((volatile unsigned short*) 0x81109020)

#include <stdio.h>

int main()
{
  80006c:	defffe04 	addi	sp,sp,-8
  800070:	dfc00115 	stw	ra,4(sp)
  800074:	df000015 	stw	fp,0(sp)
  800078:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
  80007c:	01002034 	movhi	r4,128
  800080:	2105f804 	addi	r4,r4,6112
  800084:	08001300 	call	800130 <puts>

  while(1) {
	  ledr = sw;
  800088:	00a00034 	movhi	r2,32768
  80008c:	00e04474 	movhi	r3,33041
  800090:	18e40804 	addi	r3,r3,-28640
  800094:	18c0000b 	ldhu	r3,0(r3)
  800098:	10c0000d 	sth	r3,0(r2)
  }
  80009c:	003ffa06 	br	800088 <main+0x1c>

008000a0 <_puts_r>:
  8000a0:	defffd04 	addi	sp,sp,-12
  8000a4:	dc000015 	stw	r16,0(sp)
  8000a8:	2021883a 	mov	r16,r4
  8000ac:	2809883a 	mov	r4,r5
  8000b0:	dfc00215 	stw	ra,8(sp)
  8000b4:	dc400115 	stw	r17,4(sp)
  8000b8:	2823883a 	mov	r17,r5
  8000bc:	08001440 	call	800144 <strlen>
  8000c0:	80c00217 	ldw	r3,8(r16)
  8000c4:	02002034 	movhi	r8,128
  8000c8:	42005904 	addi	r8,r8,356
  8000cc:	880d883a 	mov	r6,r17
  8000d0:	100f883a 	mov	r7,r2
  8000d4:	8009883a 	mov	r4,r16
  8000d8:	180b883a 	mov	r5,r3
  8000dc:	1a000115 	stw	r8,4(r3)
  8000e0:	403ee83a 	callr	r8
  8000e4:	047fffc4 	movi	r17,-1
  8000e8:	8009883a 	mov	r4,r16
  8000ec:	01802034 	movhi	r6,128
  8000f0:	3185fd04 	addi	r6,r6,6132
  8000f4:	01c00044 	movi	r7,1
  8000f8:	1440071e 	bne	r2,r17,800118 <_puts_r+0x78>
  8000fc:	00ffffc4 	movi	r3,-1
  800100:	1805883a 	mov	r2,r3
  800104:	dfc00217 	ldw	ra,8(sp)
  800108:	dc400117 	ldw	r17,4(sp)
  80010c:	dc000017 	ldw	r16,0(sp)
  800110:	dec00304 	addi	sp,sp,12
  800114:	f800283a 	ret
  800118:	81400217 	ldw	r5,8(r16)
  80011c:	28c00117 	ldw	r3,4(r5)
  800120:	183ee83a 	callr	r3
  800124:	0007883a 	mov	r3,zero
  800128:	147ff51e 	bne	r2,r17,800100 <_puts_r+0x60>
  80012c:	003ff306 	br	8000fc <_puts_r+0x5c>

00800130 <puts>:
  800130:	00802034 	movhi	r2,128
  800134:	1086b604 	addi	r2,r2,6872
  800138:	200b883a 	mov	r5,r4
  80013c:	11000017 	ldw	r4,0(r2)
  800140:	08000a01 	jmpi	8000a0 <_puts_r>

00800144 <strlen>:
  800144:	20800007 	ldb	r2,0(r4)
  800148:	10000526 	beq	r2,zero,800160 <strlen+0x1c>
  80014c:	2007883a 	mov	r3,r4
  800150:	18c00044 	addi	r3,r3,1
  800154:	18800007 	ldb	r2,0(r3)
  800158:	103ffd1e 	bne	r2,zero,800150 <strlen+0xc>
  80015c:	1905c83a 	sub	r2,r3,r4
  800160:	f800283a 	ret

00800164 <__sfvwrite_small_dev>:
  800164:	2880000b 	ldhu	r2,0(r5)
  800168:	defffa04 	addi	sp,sp,-24
  80016c:	dcc00315 	stw	r19,12(sp)
  800170:	1080020c 	andi	r2,r2,8
  800174:	dc800215 	stw	r18,8(sp)
  800178:	dc400115 	stw	r17,4(sp)
  80017c:	dfc00515 	stw	ra,20(sp)
  800180:	dd000415 	stw	r20,16(sp)
  800184:	dc000015 	stw	r16,0(sp)
  800188:	2825883a 	mov	r18,r5
  80018c:	2027883a 	mov	r19,r4
  800190:	3023883a 	mov	r17,r6
  800194:	10002026 	beq	r2,zero,800218 <__sfvwrite_small_dev+0xb4>
  800198:	2940008f 	ldh	r5,2(r5)
  80019c:	28000f16 	blt	r5,zero,8001dc <__sfvwrite_small_dev+0x78>
  8001a0:	01c01b0e 	bge	zero,r7,800210 <__sfvwrite_small_dev+0xac>
  8001a4:	3821883a 	mov	r16,r7
  8001a8:	05010004 	movi	r20,1024
  8001ac:	00000206 	br	8001b8 <__sfvwrite_small_dev+0x54>
  8001b0:	0400170e 	bge	zero,r16,800210 <__sfvwrite_small_dev+0xac>
  8001b4:	9140008f 	ldh	r5,2(r18)
  8001b8:	880d883a 	mov	r6,r17
  8001bc:	9809883a 	mov	r4,r19
  8001c0:	800f883a 	mov	r7,r16
  8001c4:	a400010e 	bge	r20,r16,8001cc <__sfvwrite_small_dev+0x68>
  8001c8:	01c10004 	movi	r7,1024
  8001cc:	08002200 	call	800220 <_write_r>
  8001d0:	88a3883a 	add	r17,r17,r2
  8001d4:	80a1c83a 	sub	r16,r16,r2
  8001d8:	00bff516 	blt	zero,r2,8001b0 <__sfvwrite_small_dev+0x4c>
  8001dc:	9080000b 	ldhu	r2,0(r18)
  8001e0:	00ffffc4 	movi	r3,-1
  8001e4:	10801014 	ori	r2,r2,64
  8001e8:	9080000d 	sth	r2,0(r18)
  8001ec:	1805883a 	mov	r2,r3
  8001f0:	dfc00517 	ldw	ra,20(sp)
  8001f4:	dd000417 	ldw	r20,16(sp)
  8001f8:	dcc00317 	ldw	r19,12(sp)
  8001fc:	dc800217 	ldw	r18,8(sp)
  800200:	dc400117 	ldw	r17,4(sp)
  800204:	dc000017 	ldw	r16,0(sp)
  800208:	dec00604 	addi	sp,sp,24
  80020c:	f800283a 	ret
  800210:	0007883a 	mov	r3,zero
  800214:	003ff506 	br	8001ec <__sfvwrite_small_dev+0x88>
  800218:	00ffffc4 	movi	r3,-1
  80021c:	003ff306 	br	8001ec <__sfvwrite_small_dev+0x88>

00800220 <_write_r>:
  800220:	defffd04 	addi	sp,sp,-12
  800224:	dc000015 	stw	r16,0(sp)
  800228:	04002034 	movhi	r16,128
  80022c:	84077304 	addi	r16,r16,7628
  800230:	dc400115 	stw	r17,4(sp)
  800234:	80000015 	stw	zero,0(r16)
  800238:	2023883a 	mov	r17,r4
  80023c:	2809883a 	mov	r4,r5
  800240:	300b883a 	mov	r5,r6
  800244:	380d883a 	mov	r6,r7
  800248:	dfc00215 	stw	ra,8(sp)
  80024c:	08003f00 	call	8003f0 <write>
  800250:	1007883a 	mov	r3,r2
  800254:	00bfffc4 	movi	r2,-1
  800258:	18800626 	beq	r3,r2,800274 <_write_r+0x54>
  80025c:	1805883a 	mov	r2,r3
  800260:	dfc00217 	ldw	ra,8(sp)
  800264:	dc400117 	ldw	r17,4(sp)
  800268:	dc000017 	ldw	r16,0(sp)
  80026c:	dec00304 	addi	sp,sp,12
  800270:	f800283a 	ret
  800274:	80800017 	ldw	r2,0(r16)
  800278:	103ff826 	beq	r2,zero,80025c <_write_r+0x3c>
  80027c:	88800015 	stw	r2,0(r17)
  800280:	1805883a 	mov	r2,r3
  800284:	dfc00217 	ldw	ra,8(sp)
  800288:	dc400117 	ldw	r17,4(sp)
  80028c:	dc000017 	ldw	r16,0(sp)
  800290:	dec00304 	addi	sp,sp,12
  800294:	f800283a 	ret

00800298 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  800298:	defffe04 	addi	sp,sp,-8
  80029c:	dfc00115 	stw	ra,4(sp)
  8002a0:	df000015 	stw	fp,0(sp)
  8002a4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8002a8:	01002034 	movhi	r4,128
  8002ac:	2106be04 	addi	r4,r4,6904
  8002b0:	01402034 	movhi	r5,128
  8002b4:	29460904 	addi	r5,r5,6180
  8002b8:	01802034 	movhi	r6,128
  8002bc:	3186be04 	addi	r6,r6,6904
  8002c0:	08003180 	call	800318 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8002c4:	01002034 	movhi	r4,128
  8002c8:	21000804 	addi	r4,r4,32
  8002cc:	01402034 	movhi	r5,128
  8002d0:	29400804 	addi	r5,r5,32
  8002d4:	01802034 	movhi	r6,128
  8002d8:	31800804 	addi	r6,r6,32
  8002dc:	08003180 	call	800318 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8002e0:	01002034 	movhi	r4,128
  8002e4:	2105f804 	addi	r4,r4,6112
  8002e8:	01402034 	movhi	r5,128
  8002ec:	2945f804 	addi	r5,r5,6112
  8002f0:	01802034 	movhi	r6,128
  8002f4:	31860904 	addi	r6,r6,6180
  8002f8:	08003180 	call	800318 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8002fc:	08009e80 	call	8009e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  800300:	0800c340 	call	800c34 <alt_icache_flush_all>
}
  800304:	e037883a 	mov	sp,fp
  800308:	dfc00117 	ldw	ra,4(sp)
  80030c:	df000017 	ldw	fp,0(sp)
  800310:	dec00204 	addi	sp,sp,8
  800314:	f800283a 	ret

00800318 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  800318:	defffc04 	addi	sp,sp,-16
  80031c:	df000315 	stw	fp,12(sp)
  800320:	df000304 	addi	fp,sp,12
  800324:	e13ffd15 	stw	r4,-12(fp)
  800328:	e17ffe15 	stw	r5,-8(fp)
  80032c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  800330:	e0fffe17 	ldw	r3,-8(fp)
  800334:	e0bffd17 	ldw	r2,-12(fp)
  800338:	18800e26 	beq	r3,r2,800374 <alt_load_section+0x5c>
  {
    while( to != end )
  80033c:	00000a06 	br	800368 <alt_load_section+0x50>
    {
      *to++ = *from++;
  800340:	e0bffd17 	ldw	r2,-12(fp)
  800344:	10c00017 	ldw	r3,0(r2)
  800348:	e0bffe17 	ldw	r2,-8(fp)
  80034c:	10c00015 	stw	r3,0(r2)
  800350:	e0bffe17 	ldw	r2,-8(fp)
  800354:	10800104 	addi	r2,r2,4
  800358:	e0bffe15 	stw	r2,-8(fp)
  80035c:	e0bffd17 	ldw	r2,-12(fp)
  800360:	10800104 	addi	r2,r2,4
  800364:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  800368:	e0fffe17 	ldw	r3,-8(fp)
  80036c:	e0bfff17 	ldw	r2,-4(fp)
  800370:	18bff31e 	bne	r3,r2,800340 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  800374:	e037883a 	mov	sp,fp
  800378:	df000017 	ldw	fp,0(sp)
  80037c:	dec00104 	addi	sp,sp,4
  800380:	f800283a 	ret

00800384 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  800384:	defffd04 	addi	sp,sp,-12
  800388:	dfc00215 	stw	ra,8(sp)
  80038c:	df000115 	stw	fp,4(sp)
  800390:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  800394:	0009883a 	mov	r4,zero
  800398:	08005700 	call	800570 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80039c:	08005a40 	call	8005a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8003a0:	01002034 	movhi	r4,128
  8003a4:	2105fe04 	addi	r4,r4,6136
  8003a8:	01402034 	movhi	r5,128
  8003ac:	2945fe04 	addi	r5,r5,6136
  8003b0:	01802034 	movhi	r6,128
  8003b4:	3185fe04 	addi	r6,r6,6136
  8003b8:	0800d280 	call	800d28 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8003bc:	0800b6c0 	call	800b6c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8003c0:	01002034 	movhi	r4,128
  8003c4:	2102f404 	addi	r4,r4,3024
  8003c8:	08013e00 	call	8013e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8003cc:	d120be17 	ldw	r4,-32008(gp)
  8003d0:	d160bf17 	ldw	r5,-32004(gp)
  8003d4:	d1a0c017 	ldw	r6,-32000(gp)
  8003d8:	080006c0 	call	80006c <main>
  8003dc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8003e0:	01000044 	movi	r4,1
  8003e4:	080088c0 	call	80088c <close>
  exit (result);
  8003e8:	e13fff17 	ldw	r4,-4(fp)
  8003ec:	08013f40 	call	8013f4 <exit>

008003f0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8003f0:	defff704 	addi	sp,sp,-36
  8003f4:	dfc00815 	stw	ra,32(sp)
  8003f8:	df000715 	stw	fp,28(sp)
  8003fc:	df000704 	addi	fp,sp,28
  800400:	e13ffb15 	stw	r4,-20(fp)
  800404:	e17ffc15 	stw	r5,-16(fp)
  800408:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80040c:	e0bffb17 	ldw	r2,-20(fp)
  800410:	1004803a 	cmplt	r2,r2,zero
  800414:	1000081e 	bne	r2,zero,800438 <write+0x48>
  800418:	e0bffb17 	ldw	r2,-20(fp)
  80041c:	10800324 	muli	r2,r2,12
  800420:	1007883a 	mov	r3,r2
  800424:	00802034 	movhi	r2,128
  800428:	10865604 	addi	r2,r2,6488
  80042c:	1887883a 	add	r3,r3,r2
  800430:	e0ffff15 	stw	r3,-4(fp)
  800434:	00000106 	br	80043c <write+0x4c>
  800438:	e03fff15 	stw	zero,-4(fp)
  80043c:	e0bfff17 	ldw	r2,-4(fp)
  800440:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  800444:	e0bffa17 	ldw	r2,-24(fp)
  800448:	1005003a 	cmpeq	r2,r2,zero
  80044c:	1000241e 	bne	r2,zero,8004e0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  800450:	e0bffa17 	ldw	r2,-24(fp)
  800454:	10800217 	ldw	r2,8(r2)
  800458:	108000cc 	andi	r2,r2,3
  80045c:	1005003a 	cmpeq	r2,r2,zero
  800460:	10001a1e 	bne	r2,zero,8004cc <write+0xdc>
  800464:	e0bffa17 	ldw	r2,-24(fp)
  800468:	10800017 	ldw	r2,0(r2)
  80046c:	10800617 	ldw	r2,24(r2)
  800470:	1005003a 	cmpeq	r2,r2,zero
  800474:	1000151e 	bne	r2,zero,8004cc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  800478:	e0bffa17 	ldw	r2,-24(fp)
  80047c:	10800017 	ldw	r2,0(r2)
  800480:	10800617 	ldw	r2,24(r2)
  800484:	e17ffc17 	ldw	r5,-16(fp)
  800488:	e1bffd17 	ldw	r6,-12(fp)
  80048c:	e13ffa17 	ldw	r4,-24(fp)
  800490:	103ee83a 	callr	r2
  800494:	e0bff915 	stw	r2,-28(fp)
  800498:	e0bff917 	ldw	r2,-28(fp)
  80049c:	1004403a 	cmpge	r2,r2,zero
  8004a0:	1000071e 	bne	r2,zero,8004c0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  8004a4:	08005100 	call	800510 <alt_get_errno>
  8004a8:	e0fff917 	ldw	r3,-28(fp)
  8004ac:	00c7c83a 	sub	r3,zero,r3
  8004b0:	10c00015 	stw	r3,0(r2)
        return -1;
  8004b4:	00bfffc4 	movi	r2,-1
  8004b8:	e0bffe15 	stw	r2,-8(fp)
  8004bc:	00000e06 	br	8004f8 <write+0x108>
      }
      return rval;
  8004c0:	e0bff917 	ldw	r2,-28(fp)
  8004c4:	e0bffe15 	stw	r2,-8(fp)
  8004c8:	00000b06 	br	8004f8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8004cc:	08005100 	call	800510 <alt_get_errno>
  8004d0:	1007883a 	mov	r3,r2
  8004d4:	00800344 	movi	r2,13
  8004d8:	18800015 	stw	r2,0(r3)
  8004dc:	00000406 	br	8004f0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8004e0:	08005100 	call	800510 <alt_get_errno>
  8004e4:	1007883a 	mov	r3,r2
  8004e8:	00801444 	movi	r2,81
  8004ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8004f0:	00bfffc4 	movi	r2,-1
  8004f4:	e0bffe15 	stw	r2,-8(fp)
  8004f8:	e0bffe17 	ldw	r2,-8(fp)
}
  8004fc:	e037883a 	mov	sp,fp
  800500:	dfc00117 	ldw	ra,4(sp)
  800504:	df000017 	ldw	fp,0(sp)
  800508:	dec00204 	addi	sp,sp,8
  80050c:	f800283a 	ret

00800510 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  800510:	defffd04 	addi	sp,sp,-12
  800514:	dfc00215 	stw	ra,8(sp)
  800518:	df000115 	stw	fp,4(sp)
  80051c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  800520:	00802034 	movhi	r2,128
  800524:	1086bd04 	addi	r2,r2,6900
  800528:	10800017 	ldw	r2,0(r2)
  80052c:	1005003a 	cmpeq	r2,r2,zero
  800530:	1000061e 	bne	r2,zero,80054c <alt_get_errno+0x3c>
  800534:	00802034 	movhi	r2,128
  800538:	1086bd04 	addi	r2,r2,6900
  80053c:	10800017 	ldw	r2,0(r2)
  800540:	103ee83a 	callr	r2
  800544:	e0bfff15 	stw	r2,-4(fp)
  800548:	00000306 	br	800558 <alt_get_errno+0x48>
  80054c:	00802034 	movhi	r2,128
  800550:	10877304 	addi	r2,r2,7628
  800554:	e0bfff15 	stw	r2,-4(fp)
  800558:	e0bfff17 	ldw	r2,-4(fp)
}
  80055c:	e037883a 	mov	sp,fp
  800560:	dfc00117 	ldw	ra,4(sp)
  800564:	df000017 	ldw	fp,0(sp)
  800568:	dec00204 	addi	sp,sp,8
  80056c:	f800283a 	ret

00800570 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  800570:	defffd04 	addi	sp,sp,-12
  800574:	dfc00215 	stw	ra,8(sp)
  800578:	df000115 	stw	fp,4(sp)
  80057c:	df000104 	addi	fp,sp,4
  800580:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS, NIOS);
  800584:	08010c40 	call	8010c4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  800588:	00800044 	movi	r2,1
  80058c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  800590:	e037883a 	mov	sp,fp
  800594:	dfc00117 	ldw	ra,4(sp)
  800598:	df000017 	ldw	fp,0(sp)
  80059c:	dec00204 	addi	sp,sp,8
  8005a0:	f800283a 	ret

008005a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8005a4:	defffe04 	addi	sp,sp,-8
  8005a8:	dfc00115 	stw	ra,4(sp)
  8005ac:	df000015 	stw	fp,0(sp)
  8005b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
  8005b4:	00c02034 	movhi	r3,128
  8005b8:	18c77704 	addi	r3,r3,7644
  8005bc:	00804474 	movhi	r2,273
  8005c0:	10a40004 	addi	r2,r2,-28672
  8005c4:	18800015 	stw	r2,0(r3)
  8005c8:	00c02034 	movhi	r3,128
  8005cc:	18c77804 	addi	r3,r3,7648
  8005d0:	0080bef4 	movhi	r2,763
  8005d4:	10bc2004 	addi	r2,r2,-3968
  8005d8:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
  8005dc:	01002034 	movhi	r4,128
  8005e0:	21064104 	addi	r4,r4,6404
  8005e4:	08005fc0 	call	8005fc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
  8005e8:	e037883a 	mov	sp,fp
  8005ec:	dfc00117 	ldw	ra,4(sp)
  8005f0:	df000017 	ldw	fp,0(sp)
  8005f4:	dec00204 	addi	sp,sp,8
  8005f8:	f800283a 	ret

008005fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8005fc:	defffd04 	addi	sp,sp,-12
  800600:	dfc00215 	stw	ra,8(sp)
  800604:	df000115 	stw	fp,4(sp)
  800608:	df000104 	addi	fp,sp,4
  80060c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  800610:	e13fff17 	ldw	r4,-4(fp)
  800614:	01402034 	movhi	r5,128
  800618:	2946ba04 	addi	r5,r5,6888
  80061c:	0800a580 	call	800a58 <alt_dev_llist_insert>
}
  800620:	e037883a 	mov	sp,fp
  800624:	dfc00117 	ldw	ra,4(sp)
  800628:	df000017 	ldw	fp,0(sp)
  80062c:	dec00204 	addi	sp,sp,8
  800630:	f800283a 	ret

00800634 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  800634:	defffa04 	addi	sp,sp,-24
  800638:	dfc00515 	stw	ra,20(sp)
  80063c:	df000415 	stw	fp,16(sp)
  800640:	df000404 	addi	fp,sp,16
  800644:	e13ffd15 	stw	r4,-12(fp)
  800648:	e17ffe15 	stw	r5,-8(fp)
  80064c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800650:	e0bffd17 	ldw	r2,-12(fp)
  800654:	10800017 	ldw	r2,0(r2)
  800658:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80065c:	e0bffc17 	ldw	r2,-16(fp)
  800660:	11000a04 	addi	r4,r2,40
  800664:	e0bffd17 	ldw	r2,-12(fp)
  800668:	11c00217 	ldw	r7,8(r2)
  80066c:	e17ffe17 	ldw	r5,-8(fp)
  800670:	e1bfff17 	ldw	r6,-4(fp)
  800674:	08006e40 	call	8006e4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  800678:	e037883a 	mov	sp,fp
  80067c:	dfc00117 	ldw	ra,4(sp)
  800680:	df000017 	ldw	fp,0(sp)
  800684:	dec00204 	addi	sp,sp,8
  800688:	f800283a 	ret

0080068c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80068c:	defffa04 	addi	sp,sp,-24
  800690:	dfc00515 	stw	ra,20(sp)
  800694:	df000415 	stw	fp,16(sp)
  800698:	df000404 	addi	fp,sp,16
  80069c:	e13ffd15 	stw	r4,-12(fp)
  8006a0:	e17ffe15 	stw	r5,-8(fp)
  8006a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8006a8:	e0bffd17 	ldw	r2,-12(fp)
  8006ac:	10800017 	ldw	r2,0(r2)
  8006b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8006b4:	e0bffc17 	ldw	r2,-16(fp)
  8006b8:	11000a04 	addi	r4,r2,40
  8006bc:	e0bffd17 	ldw	r2,-12(fp)
  8006c0:	11c00217 	ldw	r7,8(r2)
  8006c4:	e17ffe17 	ldw	r5,-8(fp)
  8006c8:	e1bfff17 	ldw	r6,-4(fp)
  8006cc:	08007e80 	call	8007e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8006d0:	e037883a 	mov	sp,fp
  8006d4:	dfc00117 	ldw	ra,4(sp)
  8006d8:	df000017 	ldw	fp,0(sp)
  8006dc:	dec00204 	addi	sp,sp,8
  8006e0:	f800283a 	ret

008006e4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  8006e4:	defff604 	addi	sp,sp,-40
  8006e8:	df000915 	stw	fp,36(sp)
  8006ec:	df000904 	addi	fp,sp,36
  8006f0:	e13ffb15 	stw	r4,-20(fp)
  8006f4:	e17ffc15 	stw	r5,-16(fp)
  8006f8:	e1bffd15 	stw	r6,-12(fp)
  8006fc:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
  800700:	e0bffb17 	ldw	r2,-20(fp)
  800704:	10800017 	ldw	r2,0(r2)
  800708:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
  80070c:	e0bffc17 	ldw	r2,-16(fp)
  800710:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
  800714:	e0bffd17 	ldw	r2,-12(fp)
  800718:	1007883a 	mov	r3,r2
  80071c:	e0bffc17 	ldw	r2,-16(fp)
  800720:	10c5883a 	add	r2,r2,r3
  800724:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
  800728:	00001606 	br	800784 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80072c:	e0bffa17 	ldw	r2,-24(fp)
  800730:	10800037 	ldwio	r2,0(r2)
  800734:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  800738:	e0bff717 	ldw	r2,-36(fp)
  80073c:	10a0000c 	andi	r2,r2,32768
  800740:	1005003a 	cmpeq	r2,r2,zero
  800744:	1000081e 	bne	r2,zero,800768 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  800748:	e0bff717 	ldw	r2,-36(fp)
  80074c:	1007883a 	mov	r3,r2
  800750:	e0bff917 	ldw	r2,-28(fp)
  800754:	10c00005 	stb	r3,0(r2)
  800758:	e0bff917 	ldw	r2,-28(fp)
  80075c:	10800044 	addi	r2,r2,1
  800760:	e0bff915 	stw	r2,-28(fp)
  800764:	00000706 	br	800784 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
  800768:	e0fff917 	ldw	r3,-28(fp)
  80076c:	e0bffc17 	ldw	r2,-16(fp)
  800770:	1880071e 	bne	r3,r2,800790 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
  800774:	e0bffe17 	ldw	r2,-8(fp)
  800778:	1090000c 	andi	r2,r2,16384
  80077c:	1004c03a 	cmpne	r2,r2,zero
  800780:	1000031e 	bne	r2,zero,800790 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  800784:	e0fff917 	ldw	r3,-28(fp)
  800788:	e0bff817 	ldw	r2,-32(fp)
  80078c:	18bfe736 	bltu	r3,r2,80072c <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
  800790:	e0fff917 	ldw	r3,-28(fp)
  800794:	e0bffc17 	ldw	r2,-16(fp)
  800798:	18800526 	beq	r3,r2,8007b0 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
  80079c:	e0fff917 	ldw	r3,-28(fp)
  8007a0:	e0bffc17 	ldw	r2,-16(fp)
  8007a4:	1887c83a 	sub	r3,r3,r2
  8007a8:	e0ffff15 	stw	r3,-4(fp)
  8007ac:	00000906 	br	8007d4 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
  8007b0:	e0bffe17 	ldw	r2,-8(fp)
  8007b4:	1090000c 	andi	r2,r2,16384
  8007b8:	1005003a 	cmpeq	r2,r2,zero
  8007bc:	1000031e 	bne	r2,zero,8007cc <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
  8007c0:	00bffd44 	movi	r2,-11
  8007c4:	e0bfff15 	stw	r2,-4(fp)
  8007c8:	00000206 	br	8007d4 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
  8007cc:	00bffec4 	movi	r2,-5
  8007d0:	e0bfff15 	stw	r2,-4(fp)
  8007d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8007d8:	e037883a 	mov	sp,fp
  8007dc:	df000017 	ldw	fp,0(sp)
  8007e0:	dec00104 	addi	sp,sp,4
  8007e4:	f800283a 	ret

008007e8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8007e8:	defff904 	addi	sp,sp,-28
  8007ec:	df000615 	stw	fp,24(sp)
  8007f0:	df000604 	addi	fp,sp,24
  8007f4:	e13ffc15 	stw	r4,-16(fp)
  8007f8:	e17ffd15 	stw	r5,-12(fp)
  8007fc:	e1bffe15 	stw	r6,-8(fp)
  800800:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  800804:	e0bffc17 	ldw	r2,-16(fp)
  800808:	10800017 	ldw	r2,0(r2)
  80080c:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
  800810:	e0bffe17 	ldw	r2,-8(fp)
  800814:	1007883a 	mov	r3,r2
  800818:	e0bffd17 	ldw	r2,-12(fp)
  80081c:	10c5883a 	add	r2,r2,r3
  800820:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  800824:	00001106 	br	80086c <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  800828:	e0bffb17 	ldw	r2,-20(fp)
  80082c:	10800104 	addi	r2,r2,4
  800830:	10800037 	ldwio	r2,0(r2)
  800834:	10bfffec 	andhi	r2,r2,65535
  800838:	1005003a 	cmpeq	r2,r2,zero
  80083c:	10000b1e 	bne	r2,zero,80086c <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  800840:	e13ffb17 	ldw	r4,-20(fp)
  800844:	e0bffd17 	ldw	r2,-12(fp)
  800848:	10800003 	ldbu	r2,0(r2)
  80084c:	10c03fcc 	andi	r3,r2,255
  800850:	18c0201c 	xori	r3,r3,128
  800854:	18ffe004 	addi	r3,r3,-128
  800858:	e0bffd17 	ldw	r2,-12(fp)
  80085c:	10800044 	addi	r2,r2,1
  800860:	e0bffd15 	stw	r2,-12(fp)
  800864:	2005883a 	mov	r2,r4
  800868:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  80086c:	e0fffd17 	ldw	r3,-12(fp)
  800870:	e0bffa17 	ldw	r2,-24(fp)
  800874:	18bfec36 	bltu	r3,r2,800828 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  800878:	e0bffe17 	ldw	r2,-8(fp)
}
  80087c:	e037883a 	mov	sp,fp
  800880:	df000017 	ldw	fp,0(sp)
  800884:	dec00104 	addi	sp,sp,4
  800888:	f800283a 	ret

0080088c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80088c:	defff804 	addi	sp,sp,-32
  800890:	dfc00715 	stw	ra,28(sp)
  800894:	df000615 	stw	fp,24(sp)
  800898:	df000604 	addi	fp,sp,24
  80089c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8008a0:	e0bffc17 	ldw	r2,-16(fp)
  8008a4:	1004803a 	cmplt	r2,r2,zero
  8008a8:	1000081e 	bne	r2,zero,8008cc <close+0x40>
  8008ac:	e0bffc17 	ldw	r2,-16(fp)
  8008b0:	10800324 	muli	r2,r2,12
  8008b4:	1007883a 	mov	r3,r2
  8008b8:	00802034 	movhi	r2,128
  8008bc:	10865604 	addi	r2,r2,6488
  8008c0:	1887883a 	add	r3,r3,r2
  8008c4:	e0ffff15 	stw	r3,-4(fp)
  8008c8:	00000106 	br	8008d0 <close+0x44>
  8008cc:	e03fff15 	stw	zero,-4(fp)
  8008d0:	e0bfff17 	ldw	r2,-4(fp)
  8008d4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  8008d8:	e0bffb17 	ldw	r2,-20(fp)
  8008dc:	1005003a 	cmpeq	r2,r2,zero
  8008e0:	10001d1e 	bne	r2,zero,800958 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8008e4:	e0bffb17 	ldw	r2,-20(fp)
  8008e8:	10800017 	ldw	r2,0(r2)
  8008ec:	10800417 	ldw	r2,16(r2)
  8008f0:	1005003a 	cmpeq	r2,r2,zero
  8008f4:	1000071e 	bne	r2,zero,800914 <close+0x88>
  8008f8:	e0bffb17 	ldw	r2,-20(fp)
  8008fc:	10800017 	ldw	r2,0(r2)
  800900:	10800417 	ldw	r2,16(r2)
  800904:	e13ffb17 	ldw	r4,-20(fp)
  800908:	103ee83a 	callr	r2
  80090c:	e0bffe15 	stw	r2,-8(fp)
  800910:	00000106 	br	800918 <close+0x8c>
  800914:	e03ffe15 	stw	zero,-8(fp)
  800918:	e0bffe17 	ldw	r2,-8(fp)
  80091c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  800920:	e13ffc17 	ldw	r4,-16(fp)
  800924:	08010640 	call	801064 <alt_release_fd>
    if (rval < 0)
  800928:	e0bffa17 	ldw	r2,-24(fp)
  80092c:	1004403a 	cmpge	r2,r2,zero
  800930:	1000071e 	bne	r2,zero,800950 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  800934:	08009880 	call	800988 <alt_get_errno>
  800938:	e0fffa17 	ldw	r3,-24(fp)
  80093c:	00c7c83a 	sub	r3,zero,r3
  800940:	10c00015 	stw	r3,0(r2)
      return -1;
  800944:	00bfffc4 	movi	r2,-1
  800948:	e0bffd15 	stw	r2,-12(fp)
  80094c:	00000806 	br	800970 <close+0xe4>
    }
    return 0;
  800950:	e03ffd15 	stw	zero,-12(fp)
  800954:	00000606 	br	800970 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  800958:	08009880 	call	800988 <alt_get_errno>
  80095c:	1007883a 	mov	r3,r2
  800960:	00801444 	movi	r2,81
  800964:	18800015 	stw	r2,0(r3)
    return -1;
  800968:	00bfffc4 	movi	r2,-1
  80096c:	e0bffd15 	stw	r2,-12(fp)
  800970:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  800974:	e037883a 	mov	sp,fp
  800978:	dfc00117 	ldw	ra,4(sp)
  80097c:	df000017 	ldw	fp,0(sp)
  800980:	dec00204 	addi	sp,sp,8
  800984:	f800283a 	ret

00800988 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  800988:	defffd04 	addi	sp,sp,-12
  80098c:	dfc00215 	stw	ra,8(sp)
  800990:	df000115 	stw	fp,4(sp)
  800994:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  800998:	00802034 	movhi	r2,128
  80099c:	1086bd04 	addi	r2,r2,6900
  8009a0:	10800017 	ldw	r2,0(r2)
  8009a4:	1005003a 	cmpeq	r2,r2,zero
  8009a8:	1000061e 	bne	r2,zero,8009c4 <alt_get_errno+0x3c>
  8009ac:	00802034 	movhi	r2,128
  8009b0:	1086bd04 	addi	r2,r2,6900
  8009b4:	10800017 	ldw	r2,0(r2)
  8009b8:	103ee83a 	callr	r2
  8009bc:	e0bfff15 	stw	r2,-4(fp)
  8009c0:	00000306 	br	8009d0 <alt_get_errno+0x48>
  8009c4:	00802034 	movhi	r2,128
  8009c8:	10877304 	addi	r2,r2,7628
  8009cc:	e0bfff15 	stw	r2,-4(fp)
  8009d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8009d4:	e037883a 	mov	sp,fp
  8009d8:	dfc00117 	ldw	ra,4(sp)
  8009dc:	df000017 	ldw	fp,0(sp)
  8009e0:	dec00204 	addi	sp,sp,8
  8009e4:	f800283a 	ret

008009e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8009e8:	defffe04 	addi	sp,sp,-8
  8009ec:	df000115 	stw	fp,4(sp)
  8009f0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8009f4:	e03fff15 	stw	zero,-4(fp)
  8009f8:	00000506 	br	800a10 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  8009fc:	e0bfff17 	ldw	r2,-4(fp)
  800a00:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  800a04:	e0bfff17 	ldw	r2,-4(fp)
  800a08:	10800804 	addi	r2,r2,32
  800a0c:	e0bfff15 	stw	r2,-4(fp)
  800a10:	e0bfff17 	ldw	r2,-4(fp)
  800a14:	10820030 	cmpltui	r2,r2,2048
  800a18:	103ff81e 	bne	r2,zero,8009fc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  800a1c:	e037883a 	mov	sp,fp
  800a20:	df000017 	ldw	fp,0(sp)
  800a24:	dec00104 	addi	sp,sp,4
  800a28:	f800283a 	ret

00800a2c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  800a2c:	defffc04 	addi	sp,sp,-16
  800a30:	df000315 	stw	fp,12(sp)
  800a34:	df000304 	addi	fp,sp,12
  800a38:	e13ffd15 	stw	r4,-12(fp)
  800a3c:	e17ffe15 	stw	r5,-8(fp)
  800a40:	e1bfff15 	stw	r6,-4(fp)
  return len;
  800a44:	e0bfff17 	ldw	r2,-4(fp)
}
  800a48:	e037883a 	mov	sp,fp
  800a4c:	df000017 	ldw	fp,0(sp)
  800a50:	dec00104 	addi	sp,sp,4
  800a54:	f800283a 	ret

00800a58 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  800a58:	defff904 	addi	sp,sp,-28
  800a5c:	dfc00615 	stw	ra,24(sp)
  800a60:	df000515 	stw	fp,20(sp)
  800a64:	df000504 	addi	fp,sp,20
  800a68:	e13ffd15 	stw	r4,-12(fp)
  800a6c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  800a70:	e0bffd17 	ldw	r2,-12(fp)
  800a74:	1005003a 	cmpeq	r2,r2,zero
  800a78:	1000041e 	bne	r2,zero,800a8c <alt_dev_llist_insert+0x34>
  800a7c:	e0bffd17 	ldw	r2,-12(fp)
  800a80:	10800217 	ldw	r2,8(r2)
  800a84:	1004c03a 	cmpne	r2,r2,zero
  800a88:	1000071e 	bne	r2,zero,800aa8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  800a8c:	0800b0c0 	call	800b0c <alt_get_errno>
  800a90:	1007883a 	mov	r3,r2
  800a94:	00800584 	movi	r2,22
  800a98:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  800a9c:	00bffa84 	movi	r2,-22
  800aa0:	e0bfff15 	stw	r2,-4(fp)
  800aa4:	00001306 	br	800af4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  800aa8:	e0fffd17 	ldw	r3,-12(fp)
  800aac:	e0bffe17 	ldw	r2,-8(fp)
  800ab0:	e0bffb15 	stw	r2,-20(fp)
  800ab4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  800ab8:	e0fffc17 	ldw	r3,-16(fp)
  800abc:	e0bffb17 	ldw	r2,-20(fp)
  800ac0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  800ac4:	e0bffb17 	ldw	r2,-20(fp)
  800ac8:	10c00017 	ldw	r3,0(r2)
  800acc:	e0bffc17 	ldw	r2,-16(fp)
  800ad0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  800ad4:	e0bffb17 	ldw	r2,-20(fp)
  800ad8:	10c00017 	ldw	r3,0(r2)
  800adc:	e0bffc17 	ldw	r2,-16(fp)
  800ae0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  800ae4:	e0fffb17 	ldw	r3,-20(fp)
  800ae8:	e0bffc17 	ldw	r2,-16(fp)
  800aec:	18800015 	stw	r2,0(r3)

  return 0;  
  800af0:	e03fff15 	stw	zero,-4(fp)
  800af4:	e0bfff17 	ldw	r2,-4(fp)
}
  800af8:	e037883a 	mov	sp,fp
  800afc:	dfc00117 	ldw	ra,4(sp)
  800b00:	df000017 	ldw	fp,0(sp)
  800b04:	dec00204 	addi	sp,sp,8
  800b08:	f800283a 	ret

00800b0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  800b0c:	defffd04 	addi	sp,sp,-12
  800b10:	dfc00215 	stw	ra,8(sp)
  800b14:	df000115 	stw	fp,4(sp)
  800b18:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  800b1c:	00802034 	movhi	r2,128
  800b20:	1086bd04 	addi	r2,r2,6900
  800b24:	10800017 	ldw	r2,0(r2)
  800b28:	1005003a 	cmpeq	r2,r2,zero
  800b2c:	1000061e 	bne	r2,zero,800b48 <alt_get_errno+0x3c>
  800b30:	00802034 	movhi	r2,128
  800b34:	1086bd04 	addi	r2,r2,6900
  800b38:	10800017 	ldw	r2,0(r2)
  800b3c:	103ee83a 	callr	r2
  800b40:	e0bfff15 	stw	r2,-4(fp)
  800b44:	00000306 	br	800b54 <alt_get_errno+0x48>
  800b48:	00802034 	movhi	r2,128
  800b4c:	10877304 	addi	r2,r2,7628
  800b50:	e0bfff15 	stw	r2,-4(fp)
  800b54:	e0bfff17 	ldw	r2,-4(fp)
}
  800b58:	e037883a 	mov	sp,fp
  800b5c:	dfc00117 	ldw	ra,4(sp)
  800b60:	df000017 	ldw	fp,0(sp)
  800b64:	dec00204 	addi	sp,sp,8
  800b68:	f800283a 	ret

00800b6c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  800b6c:	defffd04 	addi	sp,sp,-12
  800b70:	dfc00215 	stw	ra,8(sp)
  800b74:	df000115 	stw	fp,4(sp)
  800b78:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  800b7c:	00bfff04 	movi	r2,-4
  800b80:	00c02034 	movhi	r3,128
  800b84:	18c5f804 	addi	r3,r3,6112
  800b88:	1885883a 	add	r2,r3,r2
  800b8c:	e0bfff15 	stw	r2,-4(fp)
  800b90:	00000606 	br	800bac <_do_ctors+0x40>
        (*ctor) (); 
  800b94:	e0bfff17 	ldw	r2,-4(fp)
  800b98:	10800017 	ldw	r2,0(r2)
  800b9c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  800ba0:	e0bfff17 	ldw	r2,-4(fp)
  800ba4:	10bfff04 	addi	r2,r2,-4
  800ba8:	e0bfff15 	stw	r2,-4(fp)
  800bac:	e0ffff17 	ldw	r3,-4(fp)
  800bb0:	00802034 	movhi	r2,128
  800bb4:	1085f704 	addi	r2,r2,6108
  800bb8:	18bff62e 	bgeu	r3,r2,800b94 <_do_ctors+0x28>
        (*ctor) (); 
}
  800bbc:	e037883a 	mov	sp,fp
  800bc0:	dfc00117 	ldw	ra,4(sp)
  800bc4:	df000017 	ldw	fp,0(sp)
  800bc8:	dec00204 	addi	sp,sp,8
  800bcc:	f800283a 	ret

00800bd0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  800bd0:	defffd04 	addi	sp,sp,-12
  800bd4:	dfc00215 	stw	ra,8(sp)
  800bd8:	df000115 	stw	fp,4(sp)
  800bdc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  800be0:	00bfff04 	movi	r2,-4
  800be4:	00c02034 	movhi	r3,128
  800be8:	18c5f804 	addi	r3,r3,6112
  800bec:	1885883a 	add	r2,r3,r2
  800bf0:	e0bfff15 	stw	r2,-4(fp)
  800bf4:	00000606 	br	800c10 <_do_dtors+0x40>
        (*dtor) (); 
  800bf8:	e0bfff17 	ldw	r2,-4(fp)
  800bfc:	10800017 	ldw	r2,0(r2)
  800c00:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  800c04:	e0bfff17 	ldw	r2,-4(fp)
  800c08:	10bfff04 	addi	r2,r2,-4
  800c0c:	e0bfff15 	stw	r2,-4(fp)
  800c10:	e0ffff17 	ldw	r3,-4(fp)
  800c14:	00802034 	movhi	r2,128
  800c18:	1085f804 	addi	r2,r2,6112
  800c1c:	18bff62e 	bgeu	r3,r2,800bf8 <_do_dtors+0x28>
        (*dtor) (); 
}
  800c20:	e037883a 	mov	sp,fp
  800c24:	dfc00117 	ldw	ra,4(sp)
  800c28:	df000017 	ldw	fp,0(sp)
  800c2c:	dec00204 	addi	sp,sp,8
  800c30:	f800283a 	ret

00800c34 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  800c34:	defffe04 	addi	sp,sp,-8
  800c38:	dfc00115 	stw	ra,4(sp)
  800c3c:	df000015 	stw	fp,0(sp)
  800c40:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  800c44:	0009883a 	mov	r4,zero
  800c48:	01420004 	movi	r5,2048
  800c4c:	08013500 	call	801350 <alt_icache_flush>
#endif
}
  800c50:	e037883a 	mov	sp,fp
  800c54:	dfc00117 	ldw	ra,4(sp)
  800c58:	df000017 	ldw	fp,0(sp)
  800c5c:	dec00204 	addi	sp,sp,8
  800c60:	f800283a 	ret

00800c64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  800c64:	defff904 	addi	sp,sp,-28
  800c68:	dfc00615 	stw	ra,24(sp)
  800c6c:	df000515 	stw	fp,20(sp)
  800c70:	df000504 	addi	fp,sp,20
  800c74:	e13ffc15 	stw	r4,-16(fp)
  800c78:	e17ffd15 	stw	r5,-12(fp)
  800c7c:	e1bffe15 	stw	r6,-8(fp)
  800c80:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  800c84:	e13ffd17 	ldw	r4,-12(fp)
  800c88:	e17ffe17 	ldw	r5,-8(fp)
  800c8c:	e1bfff17 	ldw	r6,-4(fp)
  800c90:	0800e7c0 	call	800e7c <open>
  800c94:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  800c98:	e0bffb17 	ldw	r2,-20(fp)
  800c9c:	1004803a 	cmplt	r2,r2,zero
  800ca0:	10001c1e 	bne	r2,zero,800d14 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  800ca4:	e0bffb17 	ldw	r2,-20(fp)
  800ca8:	00c02034 	movhi	r3,128
  800cac:	18c65604 	addi	r3,r3,6488
  800cb0:	10800324 	muli	r2,r2,12
  800cb4:	10c5883a 	add	r2,r2,r3
  800cb8:	10c00017 	ldw	r3,0(r2)
  800cbc:	e0bffc17 	ldw	r2,-16(fp)
  800cc0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  800cc4:	e0bffb17 	ldw	r2,-20(fp)
  800cc8:	00c02034 	movhi	r3,128
  800ccc:	18c65604 	addi	r3,r3,6488
  800cd0:	10800324 	muli	r2,r2,12
  800cd4:	10c5883a 	add	r2,r2,r3
  800cd8:	10800104 	addi	r2,r2,4
  800cdc:	10c00017 	ldw	r3,0(r2)
  800ce0:	e0bffc17 	ldw	r2,-16(fp)
  800ce4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  800ce8:	e0bffb17 	ldw	r2,-20(fp)
  800cec:	00c02034 	movhi	r3,128
  800cf0:	18c65604 	addi	r3,r3,6488
  800cf4:	10800324 	muli	r2,r2,12
  800cf8:	10c5883a 	add	r2,r2,r3
  800cfc:	10800204 	addi	r2,r2,8
  800d00:	10c00017 	ldw	r3,0(r2)
  800d04:	e0bffc17 	ldw	r2,-16(fp)
  800d08:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  800d0c:	e13ffb17 	ldw	r4,-20(fp)
  800d10:	08010640 	call	801064 <alt_release_fd>
  }
} 
  800d14:	e037883a 	mov	sp,fp
  800d18:	dfc00117 	ldw	ra,4(sp)
  800d1c:	df000017 	ldw	fp,0(sp)
  800d20:	dec00204 	addi	sp,sp,8
  800d24:	f800283a 	ret

00800d28 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  800d28:	defffb04 	addi	sp,sp,-20
  800d2c:	dfc00415 	stw	ra,16(sp)
  800d30:	df000315 	stw	fp,12(sp)
  800d34:	df000304 	addi	fp,sp,12
  800d38:	e13ffd15 	stw	r4,-12(fp)
  800d3c:	e17ffe15 	stw	r5,-8(fp)
  800d40:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  800d44:	01002034 	movhi	r4,128
  800d48:	21065904 	addi	r4,r4,6500
  800d4c:	e17ffd17 	ldw	r5,-12(fp)
  800d50:	01800044 	movi	r6,1
  800d54:	01c07fc4 	movi	r7,511
  800d58:	0800c640 	call	800c64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  800d5c:	01002034 	movhi	r4,128
  800d60:	21065604 	addi	r4,r4,6488
  800d64:	e17ffe17 	ldw	r5,-8(fp)
  800d68:	000d883a 	mov	r6,zero
  800d6c:	01c07fc4 	movi	r7,511
  800d70:	0800c640 	call	800c64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  800d74:	01002034 	movhi	r4,128
  800d78:	21065c04 	addi	r4,r4,6512
  800d7c:	e17fff17 	ldw	r5,-4(fp)
  800d80:	01800044 	movi	r6,1
  800d84:	01c07fc4 	movi	r7,511
  800d88:	0800c640 	call	800c64 <alt_open_fd>
}  
  800d8c:	e037883a 	mov	sp,fp
  800d90:	dfc00117 	ldw	ra,4(sp)
  800d94:	df000017 	ldw	fp,0(sp)
  800d98:	dec00204 	addi	sp,sp,8
  800d9c:	f800283a 	ret

00800da0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  800da0:	defffc04 	addi	sp,sp,-16
  800da4:	df000315 	stw	fp,12(sp)
  800da8:	df000304 	addi	fp,sp,12
  800dac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  800db0:	e0bffe17 	ldw	r2,-8(fp)
  800db4:	10800217 	ldw	r2,8(r2)
  800db8:	10d00034 	orhi	r3,r2,16384
  800dbc:	e0bffe17 	ldw	r2,-8(fp)
  800dc0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  800dc4:	e03ffd15 	stw	zero,-12(fp)
  800dc8:	00002006 	br	800e4c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  800dcc:	e0bffd17 	ldw	r2,-12(fp)
  800dd0:	00c02034 	movhi	r3,128
  800dd4:	18c65604 	addi	r3,r3,6488
  800dd8:	10800324 	muli	r2,r2,12
  800ddc:	10c5883a 	add	r2,r2,r3
  800de0:	10c00017 	ldw	r3,0(r2)
  800de4:	e0bffe17 	ldw	r2,-8(fp)
  800de8:	10800017 	ldw	r2,0(r2)
  800dec:	1880141e 	bne	r3,r2,800e40 <alt_file_locked+0xa0>
  800df0:	e0bffd17 	ldw	r2,-12(fp)
  800df4:	00c02034 	movhi	r3,128
  800df8:	18c65604 	addi	r3,r3,6488
  800dfc:	10800324 	muli	r2,r2,12
  800e00:	10c5883a 	add	r2,r2,r3
  800e04:	10800204 	addi	r2,r2,8
  800e08:	10800017 	ldw	r2,0(r2)
  800e0c:	1004403a 	cmpge	r2,r2,zero
  800e10:	10000b1e 	bne	r2,zero,800e40 <alt_file_locked+0xa0>
  800e14:	e0bffd17 	ldw	r2,-12(fp)
  800e18:	10800324 	muli	r2,r2,12
  800e1c:	1007883a 	mov	r3,r2
  800e20:	00802034 	movhi	r2,128
  800e24:	10865604 	addi	r2,r2,6488
  800e28:	1887883a 	add	r3,r3,r2
  800e2c:	e0bffe17 	ldw	r2,-8(fp)
  800e30:	18800326 	beq	r3,r2,800e40 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  800e34:	00bffcc4 	movi	r2,-13
  800e38:	e0bfff15 	stw	r2,-4(fp)
  800e3c:	00000a06 	br	800e68 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  800e40:	e0bffd17 	ldw	r2,-12(fp)
  800e44:	10800044 	addi	r2,r2,1
  800e48:	e0bffd15 	stw	r2,-12(fp)
  800e4c:	00802034 	movhi	r2,128
  800e50:	1086bc04 	addi	r2,r2,6896
  800e54:	10800017 	ldw	r2,0(r2)
  800e58:	1007883a 	mov	r3,r2
  800e5c:	e0bffd17 	ldw	r2,-12(fp)
  800e60:	18bfda2e 	bgeu	r3,r2,800dcc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  800e64:	e03fff15 	stw	zero,-4(fp)
  800e68:	e0bfff17 	ldw	r2,-4(fp)
}
  800e6c:	e037883a 	mov	sp,fp
  800e70:	df000017 	ldw	fp,0(sp)
  800e74:	dec00104 	addi	sp,sp,4
  800e78:	f800283a 	ret

00800e7c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  800e7c:	defff404 	addi	sp,sp,-48
  800e80:	dfc00b15 	stw	ra,44(sp)
  800e84:	df000a15 	stw	fp,40(sp)
  800e88:	df000a04 	addi	fp,sp,40
  800e8c:	e13ffb15 	stw	r4,-20(fp)
  800e90:	e17ffc15 	stw	r5,-16(fp)
  800e94:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  800e98:	00bfffc4 	movi	r2,-1
  800e9c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  800ea0:	00bffb44 	movi	r2,-19
  800ea4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  800ea8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  800eac:	e13ffb17 	ldw	r4,-20(fp)
  800eb0:	01402034 	movhi	r5,128
  800eb4:	2946ba04 	addi	r5,r5,6888
  800eb8:	08010e40 	call	8010e4 <alt_find_dev>
  800ebc:	e0bffa15 	stw	r2,-24(fp)
  800ec0:	e0bffa17 	ldw	r2,-24(fp)
  800ec4:	1004c03a 	cmpne	r2,r2,zero
  800ec8:	1000051e 	bne	r2,zero,800ee0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  800ecc:	e13ffb17 	ldw	r4,-20(fp)
  800ed0:	08011780 	call	801178 <alt_find_file>
  800ed4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  800ed8:	00800044 	movi	r2,1
  800edc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  800ee0:	e0bffa17 	ldw	r2,-24(fp)
  800ee4:	1005003a 	cmpeq	r2,r2,zero
  800ee8:	1000301e 	bne	r2,zero,800fac <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  800eec:	e13ffa17 	ldw	r4,-24(fp)
  800ef0:	08012980 	call	801298 <alt_get_fd>
  800ef4:	e0bff815 	stw	r2,-32(fp)
  800ef8:	e0bff817 	ldw	r2,-32(fp)
  800efc:	1004403a 	cmpge	r2,r2,zero
  800f00:	1000031e 	bne	r2,zero,800f10 <open+0x94>
    {
      status = index;
  800f04:	e0bff817 	ldw	r2,-32(fp)
  800f08:	e0bff715 	stw	r2,-36(fp)
  800f0c:	00002906 	br	800fb4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  800f10:	e0bff817 	ldw	r2,-32(fp)
  800f14:	10800324 	muli	r2,r2,12
  800f18:	1007883a 	mov	r3,r2
  800f1c:	00802034 	movhi	r2,128
  800f20:	10865604 	addi	r2,r2,6488
  800f24:	1885883a 	add	r2,r3,r2
  800f28:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  800f2c:	e0fffc17 	ldw	r3,-16(fp)
  800f30:	00900034 	movhi	r2,16384
  800f34:	10bfffc4 	addi	r2,r2,-1
  800f38:	1886703a 	and	r3,r3,r2
  800f3c:	e0bff917 	ldw	r2,-28(fp)
  800f40:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  800f44:	e0bff617 	ldw	r2,-40(fp)
  800f48:	1004c03a 	cmpne	r2,r2,zero
  800f4c:	1000061e 	bne	r2,zero,800f68 <open+0xec>
  800f50:	e13ff917 	ldw	r4,-28(fp)
  800f54:	0800da00 	call	800da0 <alt_file_locked>
  800f58:	e0bff715 	stw	r2,-36(fp)
  800f5c:	e0bff717 	ldw	r2,-36(fp)
  800f60:	1004803a 	cmplt	r2,r2,zero
  800f64:	1000131e 	bne	r2,zero,800fb4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  800f68:	e0bffa17 	ldw	r2,-24(fp)
  800f6c:	10800317 	ldw	r2,12(r2)
  800f70:	1005003a 	cmpeq	r2,r2,zero
  800f74:	1000091e 	bne	r2,zero,800f9c <open+0x120>
  800f78:	e0bffa17 	ldw	r2,-24(fp)
  800f7c:	10800317 	ldw	r2,12(r2)
  800f80:	e13ff917 	ldw	r4,-28(fp)
  800f84:	e17ffb17 	ldw	r5,-20(fp)
  800f88:	e1bffc17 	ldw	r6,-16(fp)
  800f8c:	e1fffd17 	ldw	r7,-12(fp)
  800f90:	103ee83a 	callr	r2
  800f94:	e0bfff15 	stw	r2,-4(fp)
  800f98:	00000106 	br	800fa0 <open+0x124>
  800f9c:	e03fff15 	stw	zero,-4(fp)
  800fa0:	e0bfff17 	ldw	r2,-4(fp)
  800fa4:	e0bff715 	stw	r2,-36(fp)
  800fa8:	00000206 	br	800fb4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  800fac:	00bffb44 	movi	r2,-19
  800fb0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  800fb4:	e0bff717 	ldw	r2,-36(fp)
  800fb8:	1004403a 	cmpge	r2,r2,zero
  800fbc:	1000091e 	bne	r2,zero,800fe4 <open+0x168>
  {
    alt_release_fd (index);  
  800fc0:	e13ff817 	ldw	r4,-32(fp)
  800fc4:	08010640 	call	801064 <alt_release_fd>
    ALT_ERRNO = -status;
  800fc8:	08010040 	call	801004 <alt_get_errno>
  800fcc:	e0fff717 	ldw	r3,-36(fp)
  800fd0:	00c7c83a 	sub	r3,zero,r3
  800fd4:	10c00015 	stw	r3,0(r2)
    return -1;
  800fd8:	00bfffc4 	movi	r2,-1
  800fdc:	e0bffe15 	stw	r2,-8(fp)
  800fe0:	00000206 	br	800fec <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  800fe4:	e0bff817 	ldw	r2,-32(fp)
  800fe8:	e0bffe15 	stw	r2,-8(fp)
  800fec:	e0bffe17 	ldw	r2,-8(fp)
}
  800ff0:	e037883a 	mov	sp,fp
  800ff4:	dfc00117 	ldw	ra,4(sp)
  800ff8:	df000017 	ldw	fp,0(sp)
  800ffc:	dec00204 	addi	sp,sp,8
  801000:	f800283a 	ret

00801004 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  801004:	defffd04 	addi	sp,sp,-12
  801008:	dfc00215 	stw	ra,8(sp)
  80100c:	df000115 	stw	fp,4(sp)
  801010:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  801014:	00802034 	movhi	r2,128
  801018:	1086bd04 	addi	r2,r2,6900
  80101c:	10800017 	ldw	r2,0(r2)
  801020:	1005003a 	cmpeq	r2,r2,zero
  801024:	1000061e 	bne	r2,zero,801040 <alt_get_errno+0x3c>
  801028:	00802034 	movhi	r2,128
  80102c:	1086bd04 	addi	r2,r2,6900
  801030:	10800017 	ldw	r2,0(r2)
  801034:	103ee83a 	callr	r2
  801038:	e0bfff15 	stw	r2,-4(fp)
  80103c:	00000306 	br	80104c <alt_get_errno+0x48>
  801040:	00802034 	movhi	r2,128
  801044:	10877304 	addi	r2,r2,7628
  801048:	e0bfff15 	stw	r2,-4(fp)
  80104c:	e0bfff17 	ldw	r2,-4(fp)
}
  801050:	e037883a 	mov	sp,fp
  801054:	dfc00117 	ldw	ra,4(sp)
  801058:	df000017 	ldw	fp,0(sp)
  80105c:	dec00204 	addi	sp,sp,8
  801060:	f800283a 	ret

00801064 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  801064:	defffe04 	addi	sp,sp,-8
  801068:	df000115 	stw	fp,4(sp)
  80106c:	df000104 	addi	fp,sp,4
  801070:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  801074:	e0bfff17 	ldw	r2,-4(fp)
  801078:	108000d0 	cmplti	r2,r2,3
  80107c:	10000d1e 	bne	r2,zero,8010b4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  801080:	e0bfff17 	ldw	r2,-4(fp)
  801084:	00c02034 	movhi	r3,128
  801088:	18c65604 	addi	r3,r3,6488
  80108c:	10800324 	muli	r2,r2,12
  801090:	10c5883a 	add	r2,r2,r3
  801094:	10800204 	addi	r2,r2,8
  801098:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80109c:	e0bfff17 	ldw	r2,-4(fp)
  8010a0:	00c02034 	movhi	r3,128
  8010a4:	18c65604 	addi	r3,r3,6488
  8010a8:	10800324 	muli	r2,r2,12
  8010ac:	10c5883a 	add	r2,r2,r3
  8010b0:	10000015 	stw	zero,0(r2)
  }
}
  8010b4:	e037883a 	mov	sp,fp
  8010b8:	df000017 	ldw	fp,0(sp)
  8010bc:	dec00104 	addi	sp,sp,4
  8010c0:	f800283a 	ret

008010c4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  8010c4:	deffff04 	addi	sp,sp,-4
  8010c8:	df000015 	stw	fp,0(sp)
  8010cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8010d0:	000170fa 	wrctl	ienable,zero
}
  8010d4:	e037883a 	mov	sp,fp
  8010d8:	df000017 	ldw	fp,0(sp)
  8010dc:	dec00104 	addi	sp,sp,4
  8010e0:	f800283a 	ret

008010e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8010e4:	defff904 	addi	sp,sp,-28
  8010e8:	dfc00615 	stw	ra,24(sp)
  8010ec:	df000515 	stw	fp,20(sp)
  8010f0:	df000504 	addi	fp,sp,20
  8010f4:	e13ffd15 	stw	r4,-12(fp)
  8010f8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8010fc:	e0bffe17 	ldw	r2,-8(fp)
  801100:	10800017 	ldw	r2,0(r2)
  801104:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  801108:	e13ffd17 	ldw	r4,-12(fp)
  80110c:	08001440 	call	800144 <strlen>
  801110:	10800044 	addi	r2,r2,1
  801114:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  801118:	00000d06 	br	801150 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80111c:	e0bffc17 	ldw	r2,-16(fp)
  801120:	11000217 	ldw	r4,8(r2)
  801124:	e1bffb17 	ldw	r6,-20(fp)
  801128:	e17ffd17 	ldw	r5,-12(fp)
  80112c:	08014140 	call	801414 <memcmp>
  801130:	1004c03a 	cmpne	r2,r2,zero
  801134:	1000031e 	bne	r2,zero,801144 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  801138:	e0bffc17 	ldw	r2,-16(fp)
  80113c:	e0bfff15 	stw	r2,-4(fp)
  801140:	00000706 	br	801160 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  801144:	e0bffc17 	ldw	r2,-16(fp)
  801148:	10800017 	ldw	r2,0(r2)
  80114c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  801150:	e0fffe17 	ldw	r3,-8(fp)
  801154:	e0bffc17 	ldw	r2,-16(fp)
  801158:	10fff01e 	bne	r2,r3,80111c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80115c:	e03fff15 	stw	zero,-4(fp)
  801160:	e0bfff17 	ldw	r2,-4(fp)
}
  801164:	e037883a 	mov	sp,fp
  801168:	dfc00117 	ldw	ra,4(sp)
  80116c:	df000017 	ldw	fp,0(sp)
  801170:	dec00204 	addi	sp,sp,8
  801174:	f800283a 	ret

00801178 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  801178:	defffa04 	addi	sp,sp,-24
  80117c:	dfc00515 	stw	ra,20(sp)
  801180:	df000415 	stw	fp,16(sp)
  801184:	df000404 	addi	fp,sp,16
  801188:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80118c:	00802034 	movhi	r2,128
  801190:	1086b804 	addi	r2,r2,6880
  801194:	10800017 	ldw	r2,0(r2)
  801198:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80119c:	00003306 	br	80126c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  8011a0:	e0bffd17 	ldw	r2,-12(fp)
  8011a4:	11000217 	ldw	r4,8(r2)
  8011a8:	08001440 	call	800144 <strlen>
  8011ac:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  8011b0:	e0bffd17 	ldw	r2,-12(fp)
  8011b4:	10c00217 	ldw	r3,8(r2)
  8011b8:	e0bffc17 	ldw	r2,-16(fp)
  8011bc:	1885883a 	add	r2,r3,r2
  8011c0:	10bfffc4 	addi	r2,r2,-1
  8011c4:	10800003 	ldbu	r2,0(r2)
  8011c8:	10803fcc 	andi	r2,r2,255
  8011cc:	1080201c 	xori	r2,r2,128
  8011d0:	10bfe004 	addi	r2,r2,-128
  8011d4:	10800bd8 	cmpnei	r2,r2,47
  8011d8:	1000031e 	bne	r2,zero,8011e8 <alt_find_file+0x70>
    {
      len -= 1;
  8011dc:	e0bffc17 	ldw	r2,-16(fp)
  8011e0:	10bfffc4 	addi	r2,r2,-1
  8011e4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8011e8:	e0bffc17 	ldw	r2,-16(fp)
  8011ec:	1007883a 	mov	r3,r2
  8011f0:	e0bffe17 	ldw	r2,-8(fp)
  8011f4:	1885883a 	add	r2,r3,r2
  8011f8:	10800003 	ldbu	r2,0(r2)
  8011fc:	10803fcc 	andi	r2,r2,255
  801200:	1080201c 	xori	r2,r2,128
  801204:	10bfe004 	addi	r2,r2,-128
  801208:	10800be0 	cmpeqi	r2,r2,47
  80120c:	10000a1e 	bne	r2,zero,801238 <alt_find_file+0xc0>
  801210:	e0bffc17 	ldw	r2,-16(fp)
  801214:	1007883a 	mov	r3,r2
  801218:	e0bffe17 	ldw	r2,-8(fp)
  80121c:	1885883a 	add	r2,r3,r2
  801220:	10800003 	ldbu	r2,0(r2)
  801224:	10803fcc 	andi	r2,r2,255
  801228:	1080201c 	xori	r2,r2,128
  80122c:	10bfe004 	addi	r2,r2,-128
  801230:	1004c03a 	cmpne	r2,r2,zero
  801234:	10000a1e 	bne	r2,zero,801260 <alt_find_file+0xe8>
  801238:	e0bffd17 	ldw	r2,-12(fp)
  80123c:	11000217 	ldw	r4,8(r2)
  801240:	e1bffc17 	ldw	r6,-16(fp)
  801244:	e17ffe17 	ldw	r5,-8(fp)
  801248:	08014140 	call	801414 <memcmp>
  80124c:	1004c03a 	cmpne	r2,r2,zero
  801250:	1000031e 	bne	r2,zero,801260 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  801254:	e0bffd17 	ldw	r2,-12(fp)
  801258:	e0bfff15 	stw	r2,-4(fp)
  80125c:	00000806 	br	801280 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  801260:	e0bffd17 	ldw	r2,-12(fp)
  801264:	10800017 	ldw	r2,0(r2)
  801268:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80126c:	00c02034 	movhi	r3,128
  801270:	18c6b804 	addi	r3,r3,6880
  801274:	e0bffd17 	ldw	r2,-12(fp)
  801278:	10ffc91e 	bne	r2,r3,8011a0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80127c:	e03fff15 	stw	zero,-4(fp)
  801280:	e0bfff17 	ldw	r2,-4(fp)
}
  801284:	e037883a 	mov	sp,fp
  801288:	dfc00117 	ldw	ra,4(sp)
  80128c:	df000017 	ldw	fp,0(sp)
  801290:	dec00204 	addi	sp,sp,8
  801294:	f800283a 	ret

00801298 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  801298:	defffc04 	addi	sp,sp,-16
  80129c:	df000315 	stw	fp,12(sp)
  8012a0:	df000304 	addi	fp,sp,12
  8012a4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8012a8:	00bffa04 	movi	r2,-24
  8012ac:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8012b0:	e03ffe15 	stw	zero,-8(fp)
  8012b4:	00001e06 	br	801330 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  8012b8:	e0bffe17 	ldw	r2,-8(fp)
  8012bc:	00c02034 	movhi	r3,128
  8012c0:	18c65604 	addi	r3,r3,6488
  8012c4:	10800324 	muli	r2,r2,12
  8012c8:	10c5883a 	add	r2,r2,r3
  8012cc:	10800017 	ldw	r2,0(r2)
  8012d0:	1004c03a 	cmpne	r2,r2,zero
  8012d4:	1000131e 	bne	r2,zero,801324 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  8012d8:	e0bffe17 	ldw	r2,-8(fp)
  8012dc:	00c02034 	movhi	r3,128
  8012e0:	18c65604 	addi	r3,r3,6488
  8012e4:	10800324 	muli	r2,r2,12
  8012e8:	10c7883a 	add	r3,r2,r3
  8012ec:	e0bfff17 	ldw	r2,-4(fp)
  8012f0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8012f4:	00802034 	movhi	r2,128
  8012f8:	1086bc04 	addi	r2,r2,6896
  8012fc:	10c00017 	ldw	r3,0(r2)
  801300:	e0bffe17 	ldw	r2,-8(fp)
  801304:	1880040e 	bge	r3,r2,801318 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  801308:	00c02034 	movhi	r3,128
  80130c:	18c6bc04 	addi	r3,r3,6896
  801310:	e0bffe17 	ldw	r2,-8(fp)
  801314:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  801318:	e0bffe17 	ldw	r2,-8(fp)
  80131c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  801320:	00000606 	br	80133c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  801324:	e0bffe17 	ldw	r2,-8(fp)
  801328:	10800044 	addi	r2,r2,1
  80132c:	e0bffe15 	stw	r2,-8(fp)
  801330:	e0bffe17 	ldw	r2,-8(fp)
  801334:	10800810 	cmplti	r2,r2,32
  801338:	103fdf1e 	bne	r2,zero,8012b8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80133c:	e0bffd17 	ldw	r2,-12(fp)
}
  801340:	e037883a 	mov	sp,fp
  801344:	df000017 	ldw	fp,0(sp)
  801348:	dec00104 	addi	sp,sp,4
  80134c:	f800283a 	ret

00801350 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  801350:	defffb04 	addi	sp,sp,-20
  801354:	df000415 	stw	fp,16(sp)
  801358:	df000404 	addi	fp,sp,16
  80135c:	e13ffe15 	stw	r4,-8(fp)
  801360:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  801364:	e0bfff17 	ldw	r2,-4(fp)
  801368:	10820070 	cmpltui	r2,r2,2049
  80136c:	1000021e 	bne	r2,zero,801378 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  801370:	00820004 	movi	r2,2048
  801374:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  801378:	e0fffe17 	ldw	r3,-8(fp)
  80137c:	e0bfff17 	ldw	r2,-4(fp)
  801380:	1885883a 	add	r2,r3,r2
  801384:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  801388:	e0bffe17 	ldw	r2,-8(fp)
  80138c:	e0bffd15 	stw	r2,-12(fp)
  801390:	00000506 	br	8013a8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  801394:	e0bffd17 	ldw	r2,-12(fp)
  801398:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80139c:	e0bffd17 	ldw	r2,-12(fp)
  8013a0:	10800804 	addi	r2,r2,32
  8013a4:	e0bffd15 	stw	r2,-12(fp)
  8013a8:	e0fffd17 	ldw	r3,-12(fp)
  8013ac:	e0bffc17 	ldw	r2,-16(fp)
  8013b0:	18bff836 	bltu	r3,r2,801394 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8013b4:	e0bffe17 	ldw	r2,-8(fp)
  8013b8:	108007cc 	andi	r2,r2,31
  8013bc:	1005003a 	cmpeq	r2,r2,zero
  8013c0:	1000021e 	bne	r2,zero,8013cc <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8013c4:	e0bffd17 	ldw	r2,-12(fp)
  8013c8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8013cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8013d0:	e037883a 	mov	sp,fp
  8013d4:	df000017 	ldw	fp,0(sp)
  8013d8:	dec00104 	addi	sp,sp,4
  8013dc:	f800283a 	ret

008013e0 <atexit>:
  8013e0:	200b883a 	mov	r5,r4
  8013e4:	000d883a 	mov	r6,zero
  8013e8:	0009883a 	mov	r4,zero
  8013ec:	000f883a 	mov	r7,zero
  8013f0:	08014501 	jmpi	801450 <__register_exitproc>

008013f4 <exit>:
  8013f4:	defffe04 	addi	sp,sp,-8
  8013f8:	dc400015 	stw	r17,0(sp)
  8013fc:	000b883a 	mov	r5,zero
  801400:	2023883a 	mov	r17,r4
  801404:	dfc00115 	stw	ra,4(sp)
  801408:	08015c00 	call	8015c0 <__call_exitprocs>
  80140c:	8809883a 	mov	r4,r17
  801410:	08017bc0 	call	8017bc <_exit>

00801414 <memcmp>:
  801414:	31ffffc4 	addi	r7,r6,-1
  801418:	3000061e 	bne	r6,zero,801434 <memcmp+0x20>
  80141c:	00000a06 	br	801448 <memcmp+0x34>
  801420:	39ffffc4 	addi	r7,r7,-1
  801424:	00bfffc4 	movi	r2,-1
  801428:	21000044 	addi	r4,r4,1
  80142c:	29400044 	addi	r5,r5,1
  801430:	38800526 	beq	r7,r2,801448 <memcmp+0x34>
  801434:	20c00003 	ldbu	r3,0(r4)
  801438:	28800003 	ldbu	r2,0(r5)
  80143c:	18bff826 	beq	r3,r2,801420 <memcmp+0xc>
  801440:	1885c83a 	sub	r2,r3,r2
  801444:	f800283a 	ret
  801448:	0005883a 	mov	r2,zero
  80144c:	f800283a 	ret

00801450 <__register_exitproc>:
  801450:	defff904 	addi	sp,sp,-28
  801454:	00802034 	movhi	r2,128
  801458:	1086b704 	addi	r2,r2,6876
  80145c:	dc400115 	stw	r17,4(sp)
  801460:	14400017 	ldw	r17,0(r2)
  801464:	dc000015 	stw	r16,0(sp)
  801468:	dd400515 	stw	r21,20(sp)
  80146c:	8c000c17 	ldw	r16,48(r17)
  801470:	dd000415 	stw	r20,16(sp)
  801474:	dcc00315 	stw	r19,12(sp)
  801478:	dc800215 	stw	r18,8(sp)
  80147c:	dfc00615 	stw	ra,24(sp)
  801480:	2025883a 	mov	r18,r4
  801484:	282b883a 	mov	r21,r5
  801488:	3029883a 	mov	r20,r6
  80148c:	3827883a 	mov	r19,r7
  801490:	80002626 	beq	r16,zero,80152c <__register_exitproc+0xdc>
  801494:	81400117 	ldw	r5,4(r16)
  801498:	008007c4 	movi	r2,31
  80149c:	11403716 	blt	r2,r5,80157c <__register_exitproc+0x12c>
  8014a0:	90002026 	beq	r18,zero,801524 <__register_exitproc+0xd4>
  8014a4:	81802217 	ldw	r6,136(r16)
  8014a8:	30002926 	beq	r6,zero,801550 <__register_exitproc+0x100>
  8014ac:	81400117 	ldw	r5,4(r16)
  8014b0:	00c00044 	movi	r3,1
  8014b4:	31004017 	ldw	r4,256(r6)
  8014b8:	1946983a 	sll	r3,r3,r5
  8014bc:	2945883a 	add	r2,r5,r5
  8014c0:	1085883a 	add	r2,r2,r2
  8014c4:	1185883a 	add	r2,r2,r6
  8014c8:	20c8b03a 	or	r4,r4,r3
  8014cc:	14c02015 	stw	r19,128(r2)
  8014d0:	15000015 	stw	r20,0(r2)
  8014d4:	00800084 	movi	r2,2
  8014d8:	31004015 	stw	r4,256(r6)
  8014dc:	90801826 	beq	r18,r2,801540 <__register_exitproc+0xf0>
  8014e0:	2945883a 	add	r2,r5,r5
  8014e4:	1085883a 	add	r2,r2,r2
  8014e8:	1405883a 	add	r2,r2,r16
  8014ec:	28c00044 	addi	r3,r5,1
  8014f0:	0009883a 	mov	r4,zero
  8014f4:	15400215 	stw	r21,8(r2)
  8014f8:	80c00115 	stw	r3,4(r16)
  8014fc:	2005883a 	mov	r2,r4
  801500:	dfc00617 	ldw	ra,24(sp)
  801504:	dd400517 	ldw	r21,20(sp)
  801508:	dd000417 	ldw	r20,16(sp)
  80150c:	dcc00317 	ldw	r19,12(sp)
  801510:	dc800217 	ldw	r18,8(sp)
  801514:	dc400117 	ldw	r17,4(sp)
  801518:	dc000017 	ldw	r16,0(sp)
  80151c:	dec00704 	addi	sp,sp,28
  801520:	f800283a 	ret
  801524:	81400117 	ldw	r5,4(r16)
  801528:	003fed06 	br	8014e0 <__register_exitproc+0x90>
  80152c:	00802034 	movhi	r2,128
  801530:	10877904 	addi	r2,r2,7652
  801534:	1021883a 	mov	r16,r2
  801538:	88800c15 	stw	r2,48(r17)
  80153c:	003fd506 	br	801494 <__register_exitproc+0x44>
  801540:	30804117 	ldw	r2,260(r6)
  801544:	10c4b03a 	or	r2,r2,r3
  801548:	30804115 	stw	r2,260(r6)
  80154c:	003fe406 	br	8014e0 <__register_exitproc+0x90>
  801550:	00800034 	movhi	r2,0
  801554:	10800004 	addi	r2,r2,0
  801558:	10000b26 	beq	r2,zero,801588 <__register_exitproc+0x138>
  80155c:	01004204 	movi	r4,264
  801560:	103ee83a 	callr	r2
  801564:	10000826 	beq	r2,zero,801588 <__register_exitproc+0x138>
  801568:	100d883a 	mov	r6,r2
  80156c:	10004015 	stw	zero,256(r2)
  801570:	10004115 	stw	zero,260(r2)
  801574:	80802215 	stw	r2,136(r16)
  801578:	003fcc06 	br	8014ac <__register_exitproc+0x5c>
  80157c:	00800034 	movhi	r2,0
  801580:	10800004 	addi	r2,r2,0
  801584:	1000021e 	bne	r2,zero,801590 <__register_exitproc+0x140>
  801588:	013fffc4 	movi	r4,-1
  80158c:	003fdb06 	br	8014fc <__register_exitproc+0xac>
  801590:	01002304 	movi	r4,140
  801594:	103ee83a 	callr	r2
  801598:	1007883a 	mov	r3,r2
  80159c:	103ffa26 	beq	r2,zero,801588 <__register_exitproc+0x138>
  8015a0:	88800c17 	ldw	r2,48(r17)
  8015a4:	1821883a 	mov	r16,r3
  8015a8:	18000115 	stw	zero,4(r3)
  8015ac:	18800015 	stw	r2,0(r3)
  8015b0:	88c00c15 	stw	r3,48(r17)
  8015b4:	903fdb26 	beq	r18,zero,801524 <__register_exitproc+0xd4>
  8015b8:	003fba06 	br	8014a4 <__register_exitproc+0x54>

008015bc <register_fini>:
  8015bc:	f800283a 	ret

008015c0 <__call_exitprocs>:
  8015c0:	defff304 	addi	sp,sp,-52
  8015c4:	00802034 	movhi	r2,128
  8015c8:	1086b704 	addi	r2,r2,6876
  8015cc:	df000b15 	stw	fp,44(sp)
  8015d0:	17000017 	ldw	fp,0(r2)
  8015d4:	00800034 	movhi	r2,0
  8015d8:	10800004 	addi	r2,r2,0
  8015dc:	1005003a 	cmpeq	r2,r2,zero
  8015e0:	d8800215 	stw	r2,8(sp)
  8015e4:	e0800c04 	addi	r2,fp,48
  8015e8:	dd800915 	stw	r22,36(sp)
  8015ec:	dd400815 	stw	r21,32(sp)
  8015f0:	dfc00c15 	stw	ra,48(sp)
  8015f4:	ddc00a15 	stw	r23,40(sp)
  8015f8:	dd000715 	stw	r20,28(sp)
  8015fc:	dcc00615 	stw	r19,24(sp)
  801600:	dc800515 	stw	r18,20(sp)
  801604:	dc400415 	stw	r17,16(sp)
  801608:	dc000315 	stw	r16,12(sp)
  80160c:	282d883a 	mov	r22,r5
  801610:	d9000115 	stw	r4,4(sp)
  801614:	d8800015 	stw	r2,0(sp)
  801618:	282b003a 	cmpeq	r21,r5,zero
  80161c:	e4400c17 	ldw	r17,48(fp)
  801620:	88001226 	beq	r17,zero,80166c <__call_exitprocs+0xac>
  801624:	ddc00017 	ldw	r23,0(sp)
  801628:	88800117 	ldw	r2,4(r17)
  80162c:	8c802217 	ldw	r18,136(r17)
  801630:	143fffc4 	addi	r16,r2,-1
  801634:	80000b16 	blt	r16,zero,801664 <__call_exitprocs+0xa4>
  801638:	9027003a 	cmpeq	r19,r18,zero
  80163c:	a800171e 	bne	r21,zero,80169c <__call_exitprocs+0xdc>
  801640:	9800051e 	bne	r19,zero,801658 <__call_exitprocs+0x98>
  801644:	8409883a 	add	r4,r16,r16
  801648:	2105883a 	add	r2,r4,r4
  80164c:	1485883a 	add	r2,r2,r18
  801650:	10c02017 	ldw	r3,128(r2)
  801654:	b0c01226 	beq	r22,r3,8016a0 <__call_exitprocs+0xe0>
  801658:	843fffc4 	addi	r16,r16,-1
  80165c:	00bfffc4 	movi	r2,-1
  801660:	80bff61e 	bne	r16,r2,80163c <__call_exitprocs+0x7c>
  801664:	d8800217 	ldw	r2,8(sp)
  801668:	10003226 	beq	r2,zero,801734 <__call_exitprocs+0x174>
  80166c:	dfc00c17 	ldw	ra,48(sp)
  801670:	df000b17 	ldw	fp,44(sp)
  801674:	ddc00a17 	ldw	r23,40(sp)
  801678:	dd800917 	ldw	r22,36(sp)
  80167c:	dd400817 	ldw	r21,32(sp)
  801680:	dd000717 	ldw	r20,28(sp)
  801684:	dcc00617 	ldw	r19,24(sp)
  801688:	dc800517 	ldw	r18,20(sp)
  80168c:	dc400417 	ldw	r17,16(sp)
  801690:	dc000317 	ldw	r16,12(sp)
  801694:	dec00d04 	addi	sp,sp,52
  801698:	f800283a 	ret
  80169c:	8409883a 	add	r4,r16,r16
  8016a0:	88c00117 	ldw	r3,4(r17)
  8016a4:	2105883a 	add	r2,r4,r4
  8016a8:	1445883a 	add	r2,r2,r17
  8016ac:	18ffffc4 	addi	r3,r3,-1
  8016b0:	11800217 	ldw	r6,8(r2)
  8016b4:	1c001826 	beq	r3,r16,801718 <__call_exitprocs+0x158>
  8016b8:	10000215 	stw	zero,8(r2)
  8016bc:	303fe626 	beq	r6,zero,801658 <__call_exitprocs+0x98>
  8016c0:	8d000117 	ldw	r20,4(r17)
  8016c4:	9800121e 	bne	r19,zero,801710 <__call_exitprocs+0x150>
  8016c8:	00c00044 	movi	r3,1
  8016cc:	1c06983a 	sll	r3,r3,r16
  8016d0:	90804017 	ldw	r2,256(r18)
  8016d4:	1884703a 	and	r2,r3,r2
  8016d8:	10000d26 	beq	r2,zero,801710 <__call_exitprocs+0x150>
  8016dc:	90804117 	ldw	r2,260(r18)
  8016e0:	1884703a 	and	r2,r3,r2
  8016e4:	10000e1e 	bne	r2,zero,801720 <__call_exitprocs+0x160>
  8016e8:	2105883a 	add	r2,r4,r4
  8016ec:	1485883a 	add	r2,r2,r18
  8016f0:	11400017 	ldw	r5,0(r2)
  8016f4:	d9000117 	ldw	r4,4(sp)
  8016f8:	303ee83a 	callr	r6
  8016fc:	88800117 	ldw	r2,4(r17)
  801700:	a0bfc61e 	bne	r20,r2,80161c <__call_exitprocs+0x5c>
  801704:	b8800017 	ldw	r2,0(r23)
  801708:	147fd326 	beq	r2,r17,801658 <__call_exitprocs+0x98>
  80170c:	003fc306 	br	80161c <__call_exitprocs+0x5c>
  801710:	303ee83a 	callr	r6
  801714:	003ff906 	br	8016fc <__call_exitprocs+0x13c>
  801718:	8c000115 	stw	r16,4(r17)
  80171c:	003fe706 	br	8016bc <__call_exitprocs+0xfc>
  801720:	2105883a 	add	r2,r4,r4
  801724:	1485883a 	add	r2,r2,r18
  801728:	11000017 	ldw	r4,0(r2)
  80172c:	303ee83a 	callr	r6
  801730:	003ff206 	br	8016fc <__call_exitprocs+0x13c>
  801734:	88800117 	ldw	r2,4(r17)
  801738:	10000b1e 	bne	r2,zero,801768 <__call_exitprocs+0x1a8>
  80173c:	89000017 	ldw	r4,0(r17)
  801740:	20000a26 	beq	r4,zero,80176c <__call_exitprocs+0x1ac>
  801744:	b9000015 	stw	r4,0(r23)
  801748:	90000226 	beq	r18,zero,801754 <__call_exitprocs+0x194>
  80174c:	9009883a 	mov	r4,r18
  801750:	00000000 	call	0 <__alt_mem_SDRAM-0x800000>
  801754:	8809883a 	mov	r4,r17
  801758:	00000000 	call	0 <__alt_mem_SDRAM-0x800000>
  80175c:	bc400017 	ldw	r17,0(r23)
  801760:	883fb11e 	bne	r17,zero,801628 <__call_exitprocs+0x68>
  801764:	003fc106 	br	80166c <__call_exitprocs+0xac>
  801768:	89000017 	ldw	r4,0(r17)
  80176c:	882f883a 	mov	r23,r17
  801770:	2023883a 	mov	r17,r4
  801774:	883fac1e 	bne	r17,zero,801628 <__call_exitprocs+0x68>
  801778:	003fbc06 	br	80166c <__call_exitprocs+0xac>

0080177c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80177c:	defffd04 	addi	sp,sp,-12
  801780:	df000215 	stw	fp,8(sp)
  801784:	df000204 	addi	fp,sp,8
  801788:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80178c:	e0bfff17 	ldw	r2,-4(fp)
  801790:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  801794:	e0bffe17 	ldw	r2,-8(fp)
  801798:	1005003a 	cmpeq	r2,r2,zero
  80179c:	1000021e 	bne	r2,zero,8017a8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  8017a0:	002af070 	cmpltui	zero,zero,43969
  8017a4:	00000106 	br	8017ac <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  8017a8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  8017ac:	e037883a 	mov	sp,fp
  8017b0:	df000017 	ldw	fp,0(sp)
  8017b4:	dec00104 	addi	sp,sp,4
  8017b8:	f800283a 	ret

008017bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8017bc:	defffd04 	addi	sp,sp,-12
  8017c0:	dfc00215 	stw	ra,8(sp)
  8017c4:	df000115 	stw	fp,4(sp)
  8017c8:	df000104 	addi	fp,sp,4
  8017cc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  8017d0:	e13fff17 	ldw	r4,-4(fp)
  8017d4:	080177c0 	call	80177c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8017d8:	003fff06 	br	8017d8 <_exit+0x1c>
  8017dc:	008015bc 	xorhi	r2,zero,86
